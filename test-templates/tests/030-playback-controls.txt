section 30 Playback-Controls

# test the fade function
test 30-10 Fade
# a minimum volume is required to check fade-in/out
msg player PLAYER_VOLUME 25
msg main MUSICQ_INSERT 0~999~9
msg main CMD_PLAY
get player CHK_PLAYER_STATUS
resptimeout 1000
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume 25
msg player PLAY_FADE
resptimeout 5000
get player CHK_PLAYER_STATUS
chk playstate in-fadeout
mssleep 200
get player CHK_PLAYER_STATUS
chk-not actualvolume 25
# a fade during in-fadeout does nothing
msg player PLAY_FADE
get player CHK_PLAYER_STATUS
chk playstate in-fadeout
mssleep 200
get player CHK_PLAYER_STATUS
chk-not actualvolume 25
resptimeout 7000
wait playstate stopped
msg player PLAYER_VOLUME defaultvol
end

# test the pause at end function
test 30-20 Pause-at-End
msg main MUSICQ_INSERT 0~999~10
msg main CMD_PLAY
resptimeout 2000
get player CHK_PLAYER_STATUS
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume defaultvol
get player CHK_PLAYER_STATUS
chk pauseatend 0 playstate playing
msg player PLAY_PAUSEATEND
get player CHK_PLAYER_STATUS
chk pauseatend 1 playstate playing
msg player PLAY_PAUSEATEND
get player CHK_PLAYER_STATUS
chk pauseatend 0 playstate playing
msg player PLAY_PAUSEATEND
get player CHK_PLAYER_STATUS
chk pauseatend 1 playstate playing
# after the song stops, the player will be in the stopped state
msg player PLAY_FADE
get player CHK_PLAYER_STATUS
chk pauseatend 1 playstate in-fadeout
get player CHK_PLAYER_STATUS
resptimeout 5000
wait playstate stopped
get player CHK_PLAYER_STATUS
chk pauseatend 0 playstate stopped
end

# test the play/pause function
test 30-30 Play-Pause
msg main MUSICQ_INSERT 0~999~11
msg main CMD_PLAY
get player CHK_PLAYER_STATUS
resptimeout 2000
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume defaultvol
get main CHK_MAIN_MUSICQ
chk mq0len 1 dbidx 11
msg main CMD_PLAYPAUSE
get player CHK_PLAYER_STATUS
chk playstate paused
get main CHK_MAIN_MUSICQ
chk mq0len 1 qdbidx 11
msg main CMD_PLAYPAUSE
get player CHK_PLAYER_STATUS
chk playstate playing
get main CHK_MAIN_MUSICQ
chk mq0len 1 dbidx 11
msg main CMD_PLAYPAUSE
get player CHK_PLAYER_STATUS
chk playstate paused
get main CHK_MAIN_MUSICQ
chk mq0len 1 qdbidx 11
msg main CMD_PLAYPAUSE
get player CHK_PLAYER_STATUS
chk playstate playing
get main CHK_MAIN_MUSICQ
chk mq0len 1 dbidx 11
# a pause during in-fadeout creates a pause-at-end condition
msg player PLAY_FADE
get player CHK_PLAYER_STATUS
resptimeout 1000
wait playstate in-fadeout
get player CHK_PLAYER_STATUS
chk pauseatend 0 playstate in-fadeout
msg main CMD_PLAYPAUSE
get player CHK_PLAYER_STATUS
chk pauseatend 1 playstate in-fadeout
resptimeout 7000
get player CHK_PLAYER_STATUS
wait playstate stopped
end

# test the position slider
test 30-40 Position
# test while playing
msg main MUSICQ_INSERT 0~999~3
msg main MUSICQ_INSERT 0~999~4
get main CHK_MAIN_MUSICQ
chk mq0len 2
msg main CMD_PLAY
mssleep 500
get player CHK_PLAYER_STATUS
resptimeout 2000
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume defaultvol
msg player PLAY_SEEK 25000
get player CHK_PLAYER_STATUS
chk-gt playtimeplayed 25000
get player CHK_PLAYER_STATUS
chk-lt playtimeplayed 26000
msg player PLAY_SEEK 5000
get player CHK_PLAYER_STATUS
chk-gt playtimeplayed 5000
get player CHK_PLAYER_STATUS
chk-lt playtimeplayed 6000
msg player PLAY_SEEK 10000
get player CHK_PLAYER_STATUS
chk-gt playtimeplayed 10000
get player CHK_PLAYER_STATUS
chk-lt playtimeplayed 11000
msg player PLAY_SEEK 0
get player CHK_PLAYER_STATUS
chk-gt playtimeplayed 0
get player CHK_PLAYER_STATUS
chk-lt playtimeplayed 1000
msg player PLAY_SEEK 28000
resptimeout 4000
get player CHK_PLAYER_STATUS
wait playstate in-fadeout
end

# check the next-song command
# used internally by the test suite
# a)  stopped; next-song just goes to the next song in the queue
#     playstate stays stopped
# b)  paused; next-song just goes to the next song in the queue
#     playstate is stopped, the first paused song is just cleared
# c)  playing; next-song immediately goes to the next song and
#     starts playing it.  playstate is playing.
test 50-20 Next-Song
get main CHK_MAIN_MUSICQ
chk mq0len 0
get player CHK_PLAYER_STATUS
chk prepqueuecount 0
print stopped
msg main MUSICQ_INSERT 0~999~2
msg main MUSICQ_INSERT 0~999~4
msg main MUSICQ_INSERT 0~999~6
msg main MUSICQ_INSERT 0~999~8
msg main MUSICQ_INSERT 0~999~10
msg main MUSICQ_INSERT 0~999~12
msg main MUSICQ_INSERT 0~999~14
get main CHK_MAIN_MUSICQ
chk mq0len 7 qdbidx 2
get player CHK_PLAYER_STATUS
chk prepqueuecount 5 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 6 qdbidx 4
get player CHK_PLAYER_STATUS
chk prepqueuecount 5 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 5 qdbidx 6
get player CHK_PLAYER_STATUS
chk prepqueuecount 5 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 4 qdbidx 8
get player CHK_PLAYER_STATUS
chk prepqueuecount 4 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 3 qdbidx 10
get player CHK_PLAYER_STATUS
chk prepqueuecount 3 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 2 qdbidx 12
get player CHK_PLAYER_STATUS
chk prepqueuecount 2 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 1 qdbidx 14
get player CHK_PLAYER_STATUS
chk prepqueuecount 1 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 0
get player CHK_PLAYER_STATUS
chk prepqueuecount 0 playstate stopped
print playing
msg main MUSICQ_INSERT 0~999~2
msg main MUSICQ_INSERT 0~999~4
msg main MUSICQ_INSERT 0~999~6
msg main MUSICQ_INSERT 0~999~8
msg main MUSICQ_INSERT 0~999~10
msg main MUSICQ_INSERT 0~999~12
msg main MUSICQ_INSERT 0~999~14
get main CHK_MAIN_MUSICQ
chk mq0len 7 qdbidx 2
get player CHK_PLAYER_STATUS
chk prepqueuecount 5
msg main CMD_PLAY
mssleep 1000
get player CHK_PLAYER_STATUS
resptimeout 1000
wait playstate playing
msg main CMD_NEXTSONG
mssleep 1000
get main CHK_MAIN_MUSICQ
chk mq0len 6 dbidx 4
get player CHK_PLAYER_STATUS
# when a song starts playing the prep-queue entry is cleared
chk prepqueuecount 4 playstate playing
msg main CMD_NEXTSONG
mssleep 1000
get main CHK_MAIN_MUSICQ
chk mq0len 5 dbidx 6
get player CHK_PLAYER_STATUS
chk prepqueuecount 4 playstate playing
msg main CMD_NEXTSONG
mssleep 1000
get main CHK_MAIN_MUSICQ
chk mq0len 4 dbidx 8
get player CHK_PLAYER_STATUS
chk prepqueuecount 3 playstate playing
msg main CMD_NEXTSONG
mssleep 1000
get main CHK_MAIN_MUSICQ
chk mq0len 3 dbidx 10
get player CHK_PLAYER_STATUS
chk prepqueuecount 2 playstate playing
msg main CMD_NEXTSONG
mssleep 1000
get main CHK_MAIN_MUSICQ
chk mq0len 2 dbidx 12
get player CHK_PLAYER_STATUS
chk prepqueuecount 1 playstate playing
msg main CMD_NEXTSONG
mssleep 1000
get main CHK_MAIN_MUSICQ
chk mq0len 1 dbidx 14
get player CHK_PLAYER_STATUS
chk prepqueuecount 0 playstate playing
msg main CMD_NEXTSONG
mssleep 1000
get main CHK_MAIN_MUSICQ
chk mq0len 0
get player CHK_PLAYER_STATUS
chk prepqueuecount 0 playstate stopped
# paused is mostly identical to stopped except for the first song
print paused
msg main MUSICQ_INSERT 0~999~2
msg main MUSICQ_INSERT 0~999~4
msg main MUSICQ_INSERT 0~999~6
msg main MUSICQ_INSERT 0~999~8
msg main MUSICQ_INSERT 0~999~10
msg main MUSICQ_INSERT 0~999~12
msg main MUSICQ_INSERT 0~999~14
get main CHK_MAIN_MUSICQ
chk mq0len 7 qdbidx 2
get player CHK_PLAYER_STATUS
chk prepqueuecount 5 playstate stopped
msg main CMD_PLAY
mssleep 1000
get player CHK_PLAYER_STATUS
resptimeout 1000
wait playstate playing
msg main CMD_PLAYPAUSE
get player CHK_PLAYER_STATUS
wait playstate paused
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 6 qdbidx 4
get player CHK_PLAYER_STATUS
# when a song starts playing the prep-queue entry is cleared
chk prepqueuecount 5 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 5 qdbidx 6
get player CHK_PLAYER_STATUS
chk prepqueuecount 5 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 4 qdbidx 8
get player CHK_PLAYER_STATUS
chk prepqueuecount 4 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 3 qdbidx 10
get player CHK_PLAYER_STATUS
chk prepqueuecount 3 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 2 qdbidx 12
get player CHK_PLAYER_STATUS
chk prepqueuecount 2 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 1 qdbidx 14
get player CHK_PLAYER_STATUS
chk prepqueuecount 1 playstate stopped
msg main CMD_NEXTSONG
mssleep 200
get main CHK_MAIN_MUSICQ
chk mq0len 0
get player CHK_PLAYER_STATUS
chk prepqueuecount 0 playstate stopped
end

# basic test of repeat toggle
test 30-60 Repeat
msg main MUSICQ_INSERT 0~999~12
msg main MUSICQ_INSERT 0~999~13
msg main CMD_PLAY
resptimeout 2000
get player CHK_PLAYER_STATUS
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume defaultvol
get main CHK_MAIN_MUSICQ
chk dbidx 12
mssleep 500
get player CHK_PLAYER_STATUS
chk repeat 0 playstate playing
get main CHK_MAIN_MUSICQ
chk dbidx 12
msg player PLAY_REPEAT
get player CHK_PLAYER_STATUS
chk repeat 1 playstate playing
get main CHK_MAIN_MUSICQ
chk dbidx 12
# same song
msg player PLAY_FADE
get player CHK_PLAYER_STATUS
resptimeout 7000
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume defaultvol
get player CHK_PLAYER_STATUS
chk repeat 1 playstate playing
get main CHK_MAIN_MUSICQ
chk dbidx 12
# next song
msg player PLAY_REPEAT
get player CHK_PLAYER_STATUS
chk repeat 0 playstate playing
get main CHK_MAIN_MUSICQ
chk dbidx 12
msg player PLAY_FADE
resptimeout 7000
get player CHK_PLAYER_STATUS
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume defaultvol
get player CHK_PLAYER_STATUS
chk repeat 0 playstate playing
get main CHK_MAIN_MUSICQ
chk dbidx 13
end

# basic test of beginning of song function
# beginning of song while paused should reset the position
# beginning of song while fade-out is active should not do anything.
test 30-70 Beginning-of-Song
msg main MUSICQ_INSERT 0~999~13
get main CHK_MAIN_MUSICQ
chk mq0len 1
msg main CMD_PLAY
get player CHK_PLAYER_STATUS
resptimeout 2000
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume defaultvol
get player CHK_PLAYER_STATUS
chk-lt playtimeplayed 1500
msg player PLAY_SONG_BEGIN
get player CHK_PLAYER_STATUS
chk-lt playtimeplayed 200
mssleep 2000
get player CHK_PLAYER_STATUS
chk-gt playtimeplayed 2000
msg player PLAY_SONG_BEGIN
get player CHK_PLAYER_STATUS
chk-lt playtimeplayed 200
get player CHK_PLAYER_STATUS
chk playstate playing
# beginning of song while paused should reset the position
mssleep 2000
get player CHK_PLAYER_STATUS
chk-gt playtimeplayed 2000
msg main CMD_PLAYPAUSE
get player CHK_PLAYER_STATUS
chk playstate paused
msg player PLAY_SONG_BEGIN
get player CHK_PLAYER_STATUS
chk playstate paused
chk-lt playtimeplayed 100
msg main CMD_PLAY
# beginning of song while in a fade out state should not work
mssleep 2000
get player CHK_PLAYER_STATUS
chk-gt playtimeplayed 2000
msg player PLAY_FADE
get player CHK_PLAYER_STATUS
wait playstate in-fadeout
msg player PLAY_SONG_BEGIN
get player CHK_PLAYER_STATUS
chk playstate in-fadeout
get player CHK_PLAYER_STATUS
chk-gt playtimeplayed 2000
end

test 30-80 Volume
msg player PLAYER_VOLUME 20
msg main MUSICQ_INSERT 0~999~14
msg main CMD_PLAY
resptimeout 2000
get player CHK_PLAYER_STATUS
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume 20 realvolume 20
msg player PLAYER_VOLUME 30
get player CHK_PLAYER_STATUS
chk currvolume 30 realvolume 30
msg player PLAYER_VOLUME 40
get player CHK_PLAYER_STATUS
chk currvolume 40 realvolume 40
msg player PLAYER_VOLUME 20
get player CHK_PLAYER_STATUS
chk currvolume 20 realvolume 20
msg player PLAYER_VOLUME defaultvol
end

# only checks that the speed control functions.
# to test speed changes, a song will need to be modified.
# then main will know about the speed change and will send
# the adjusted duration.
test 30-90 Speed
msg main MUSICQ_INSERT 0~999~15
msg main MUSICQ_INSERT 0~999~16
msg main MUSICQ_INSERT 0~999~17
msg main CMD_PLAY
resptimeout 2000
get player CHK_PLAYER_STATUS
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume defaultvol
get player CHK_PLAYER_STATUS
chk speed 100
msg player PLAY_SPEED 110
get player CHK_PLAYER_STATUS
chk speed 110
msg player PLAY_SPEED 90
get player CHK_PLAYER_STATUS
chk speed 90
msg player PLAY_FADE
resptimeout 7000
get player CHK_PLAYER_STATUS
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume defaultvol
msg player PLAY_SPEED 130
get player CHK_PLAYER_STATUS
chk-gt playtimeplayed 1000
get player CHK_PLAYER_STATUS
chk-lt playtimeplayed 1400
msg player PLAY_FADE
resptimeout 7000
get player CHK_PLAYER_STATUS
wait playstate playing
mssleep 1000
get player CHK_PLAYER_STATUS
chk currvolume defaultvol
msg player PLAY_SPEED 70
get player CHK_PLAYER_STATUS
chk-gt playtimeplayed 1000
get player CHK_PLAYER_STATUS
chk-lt playtimeplayed 1400
end
